{"version":3,"file":"static/js/226.7638a96d.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsListPage/ContactsListPage.styled.jsx","redux/contacts/contactsSelectors.js","components/ContactForm/AddContactForm.jsx","pages/ContactsListPage/ContactsListPage.jsx"],"sourcesContent":["import { React } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { setFilter } from 'redux/filter/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const handleSearch = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Box>\n      <TextField\n        label=\"Find contact by Name\"\n        type=\"text\"\n        name=\"search\"\n        value={filter}\n        onChange={handleSearch}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        }}\n        variant=\"outlined\"\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\n\nconst ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem\n      key={id}\n      secondaryAction={\n        <IconButton\n          aria-label=\"comment\"\n          onClick={() => {\n            dispatch(deleteContact(id));\n          }}\n        >\n          <DeleteIcon />\n        </IconButton>\n      }\n    >\n      <ListItemText primary={name} />\n      <ListItemText primary={number} />\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport { React } from 'react';\n\n//import ContactItem from '../ContactItem/ContactItem';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport List from '@mui/material/List';\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListNavigation = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport TextField from '@mui/material/TextField';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nexport default function AddContactForm() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('incorrect input name');\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n    handleClose();\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Add new Contact\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Add new contact</DialogTitle>\n        <DialogContent\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            mr: 1,\n            alignItems: 'center',\n          }}\n        >\n          <DialogContentText>\n            To add new contact to your phonebook, please enter contact's name\n            and phone number here. We will send updates occasionally.\n          </DialogContentText>\n          <TextField\n            label=\"Name\"\n            name=\"name\"\n            variant=\"filled\"\n            type=\"text\"\n            placeholder=\"Enter contact name\"\n            onChange={handleChange}\n            required\n            fullWidth\n          />\n          <TextField\n            label=\"Phone number\"\n            name=\"number\"\n            variant=\"filled\"\n            type=\"tel\"\n            placeholder=\"Enter contact phone number\"\n            onChange={handleChange}\n            required\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleSubmit}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { ContactListNavigation } from './ContactsListPage.styled';\n\nimport * as contactsOperations from 'redux/contacts/contactsOperations';\nimport * as contactsSelectors from 'redux/contacts/contactsSelectors';\nimport AddContactForm from 'components/ContactForm/AddContactForm';\n\nconst ContactsListPage = () => {\n  const styleDefault = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: 20,\n    color: '#010101',\n    width: 'auto',\n    padding: '20px',\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(contactsSelectors.getFilter);\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n  const error = useSelector(contactsSelectors.getError);\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <div style={styleDefault}>\n      <ContactListNavigation>\n        <AddContactForm />\n        <Filter />\n      </ContactListNavigation>\n      {isLoading && !error && (\n        <>\n          <CircularProgress /> <br />\n          <b>Request in progress...</b>\n        </>\n      )}\n      {error && <p>Oops, something went wrong. Error is: \"{error}\"</p>}\n      {!isLoading && contacts.length > 0 && (\n        <ContactList contacts={visibleContacts} />\n      )}\n    </div>\n  );\n};\n\nexport default ContactsListPage;\n"],"names":["dispatch","useDispatch","filter","useSelector","state","Box","TextField","label","type","name","value","onChange","event","setFilter","currentTarget","InputProps","startAdornment","InputAdornment","position","Search","variant","contact","id","number","ListItem","secondaryAction","IconButton","onClick","deleteContact","Delete","ListItemText","primary","contacts","List","sx","width","maxWidth","bgcolor","map","ContactListNavigation","styled","getContacts","items","getIsLoading","isLoading","getError","error","getFilter","AddContactForm","React","open","setOpen","handleClose","useState","setName","setNumber","handleChange","console","log","Button","Dialog","onClose","DialogTitle","DialogContent","display","flexDirection","mr","alignItems","DialogContentText","placeholder","required","fullWidth","DialogActions","preventDefault","find","alert","addContact","useEffect","contactsOperations","contactsSelectors","normalizedFilter","toLowerCase","visibleContacts","includes","style","justifyContent","fontSize","color","padding","CircularProgress","length"],"sourceRoot":""}